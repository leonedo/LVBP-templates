Imports System.IO
Imports System.Net
Imports System.IO.Compression

Module Module1
    Sub Main()
        Dim zipUrl As String = "https://github.com/leonedo/LVBP-templates/archive/refs/heads/main.zip"
        Dim downloadPath As String = "C:\Path\To\Download\main.zip"
        Dim extractPath As String = "C:\Path\To\Extract"

        ' Download the zip file
        DownloadFile(zipUrl, downloadPath)

        ' Extract the contents
        ExtractZip(downloadPath, extractPath)

        Console.WriteLine("Download and extraction completed.")
    End Sub

    Sub DownloadFile(url As String, savePath As String)
        Using client As New WebClient()
            client.DownloadFile(url, savePath)
        End Using
    End Sub

    Sub ExtractZip(zipPath As String, extractPath As String)
        ZipFile.ExtractToDirectory(zipPath, extractPath)
    End Sub
End Module
Make sure to replace "C:\Path\To\Download\main.zip" and "C:\Path\To\Extract" with your desired download and extraction paths.

'Also, keep in mind that you should handle exceptions, check if the file already exists, and add more error checking depending on your use case.
'Feel free to adapt this code to your needs!




vb.net
Copy code
Imports Google.Cloud.Storage.V1
Imports System.IO

Module Module1
    Sub Main()
        Dim bucketName As String = "your-bucket-name"
        Dim folderName As String = "your-folder-name"
        Dim downloadPath As String = "C:\Path\To\Download"

        ' Set the path to your service account key JSON file
        Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", "path\to\your\service-account-key.json")

        ' Create a storage client
        Dim storage = StorageClient.Create()

        ' List objects in the specified folder
        Dim objects = storage.ListObjects(bucketName, folderName)

        ' Download each object
        For Each obj In objects
            Dim destinationPath = Path.Combine(downloadPath, obj.Name)
            Console.WriteLine($"Downloading {obj.Name} to {destinationPath}")
            storage.DownloadObject(bucketName, obj.Name, destinationPath)
        Next

        Console.WriteLine("Download completed.")
    End Sub
End Module

'Make sure to replace "your-bucket-name", "your-folder-name", and "path\to\your\service-account-key.json" with your actual GCS bucket name, folder name, and the path to your service account key JSON file.
'Also, ensure that your application has the necessary permissions to read from the GCS bucket.
'This example assumes that you want to download all objects in a specific folder. Adjust the code as needed based on your requirements.



Module StringExtensions
    <System.Runtime.CompilerServices.Extension()>
    Public Function FormatSpecialNumber(ByVal input As String) As String
        Dim result As String

        ' Convert the input string to a decimal
        Dim value As Decimal
        If Decimal.TryParse(input, value) Then
            ' Check if the value is less than 1 and format accordingly
            If value < 1 AndAlso input.StartsWith("0.") Then
                result = value.ToString(".###") ' Use appropriate format based on your needs
            Else
                result = value.ToString("0.000") ' Use appropriate format based on your needs
            End If
        Else
            ' Handle invalid input
            result = "Invalid input"
        End If

        Return result
    End Function
End Module


Imports System.Net.Http
Imports Newtonsoft.Json.Linq

Module Module1
    Sub Main()
        Dim owner As String = "LEon"
        Dim repo As String = "LVBP"

        Dim latestRelease As String = GetLatestRelease(owner, repo)

        Console.WriteLine($"Latest release version: {latestRelease}")
        Console.ReadLine()
    End Sub

    Function GetLatestRelease(owner As String, repo As String) As String
        Using client As New HttpClient()
            client.DefaultRequestHeaders.Add("User-Agent", "YourAppName")

            Dim apiUrl As String = $"https://api.github.com/repos/{owner}/{repo}/releases/latest"

            Try
                Dim response As String = client.GetStringAsync(apiUrl).Result

                Dim json As JObject = JObject.Parse(response)
                Dim tagName As String = json("tag_name").ToString()

                Return tagName
            Catch ex As Exception
                Console.WriteLine($"Error: {ex.Message}")
                Return "Error retrieving release"
            End Try
        End Using
    End Function
End Module



Module Module1
    Sub Main()
        Dim owner As String = "LEon"
        Dim repo As String = "LVBP"

        Dim downloadUrl As String = GetLatestReleaseDownloadUrl(owner, repo)

        If Not String.IsNullOrEmpty(downloadUrl) Then
            Console.WriteLine($"Latest release download URL: {downloadUrl}")
        Else
            Console.WriteLine("Error retrieving download URL.")
        End If

        Console.ReadLine()
    End Sub

    Function GetLatestReleaseDownloadUrl(owner As String, repo As String) As String
        Using client As New HttpClient()
            client.DefaultRequestHeaders.Add("User-Agent", "YourAppName")

            Dim apiUrl As String = $"https://api.github.com/repos/{owner}/{repo}/releases/latest"

            Try
                Dim response As String = client.GetStringAsync(apiUrl).Result

                Dim json As JObject = JObject.Parse(response)
                Dim assets As JArray = json("assets")

                If assets.Count > 0 Then
                    ' Assuming you want the first asset in the list
                    Dim downloadUrl As String = assets(0)("browser_download_url").ToString()
                    Return downloadUrl
                Else
                    Return "No assets found for the latest release."
                End If
            Catch ex As Exception
                Console.WriteLine($"Error: {ex.Message}")
                Return "Error retrieving download URL."
            End Try
        End Using
    End Function
End Module
